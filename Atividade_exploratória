1 - Erro de Tipagem, Problemas de Importação e Referências e Problemas de configuração do TypeScript, 
como configurações incorretas no arquivo tsconfig.json.

2 - Exceção: 1. É uma condição excepcional e imprevista que ocorre durante a execução do programa. 
2. Pode ser causada por situações como divisão por zero, tentativa de acesso a um índice inexistente em um array, falha na conexão com um banco de dados, entre outros. 
3. Geralmente, as exceções podem ser capturadas e tratadas para evitar a interrupção total do programa
 -Erro Comum: 1. São problemas identificados durante o desenvolvimento do software.
2.  Normalmente são resultado de problemas na lógica do código, como erros de sintaxe, lógica incorreta, referências indefinidas ou uso inadequado de funções.
3. Geralmente são evitáveis e podem ser corrigidos antes do programa ser executado.

3 - 3. O TypeScript utiliza um modelo de tratamento de exceções baseado em blocos 
try, catch e finally para lidar com exceções durante a execução do código.

4 -Bloco Try-Catch: Em TypeScript, você pode usar blocos try e catch para envolver o código que pode lançar uma exceção.
O bloco try contém o código onde uma exceção pode ocorrer. Se uma exceção é lançada dentro do bloco try, 
o controle é transferido imediatamente para o bloco catch. 
Bloco Finally: O bloco finally é opcional e é utilizado para definir código que deve ser executado independentemente de uma exceção ter sido lançada ou não. 
Ele é frequentemente utilizado para ações de limpeza ou para liberar recursos que foram utilizados no bloco try.

5 - Em TypeScript, é possível criar exceções personalizadas definindo classes que estendem a classe Error ou suas subclasses. 
Isso permite criar tipos específicos de exceções que podem ser lançadas em situações particulares no seu código.

6 - TypeError: Normalmente é lançado quando ocorre uma operação inválida em relação ao tipo de dado.
Por exemplo, tentar acessar uma propriedade de algo que não é um objeto, chamar métodos em valores que não são funções, ou tentar operações com tipos incompatíveis.
ReferenceError: Acontece quando o código tenta acessar uma variável ou função que não foi definida.
Isso pode ocorrer ao tentar usar uma variável que não foi declarada ou está fora do escopo atual.
RangeError: Surge quando um valor está fora do intervalo aceitável. Por exemplo,
isso pode acontecer com o estouro de um tamanho de array ou a chamada de uma função recursiva excessiva sem condição de parada.
SyntaxError: Ocorre quando há erros de sintaxe no código. 
Isso pode incluir problemas como uso incorreto de palavras-chave, falta de fechamento de chaves ou parênteses, ou problemas de formatação do código.
NetworkError: Envolvem problemas relacionados à rede, como falha na conexão com servidores ou erros de solicitações HTTP.

7 - O bloco finally no tratamento de exceções em TypeScript (e também em JavaScript) desempenha um papel crucial, 
permitindo a execução de código que deve ser executado independentemente de ter ocorrido uma exceção ou não dentro do bloco try.
A principal função do bloco finally é garantir que o código contido nele seja executado,
independentemente de uma exceção ter sido lançada ou não no bloco try. Isso é útil para tarefas que devem ser realizadas,
como limpeza de recursos, liberação de memória ou fechamento de conexões, independentemente de como o bloco try tenha sido executado.

8 - tratamento de exceções em TypeScript desempenha um papel fundamental na melhoria da robustez e segurança de uma aplicação de várias maneiras:
Controle de Fluxo, Detecção de Erros, Manutenção da Estabilidade, Prevenção de Vazamento de Informações, Manutenção da Integridade dos Dados, Identificação e Log de Erros.

9 - Existem algumas diferenças importante como: Tipagem Estática, Verificação de Tipos, 
Tratamento de Erros Avançado, Tratamento de Promessas, Melhor Compatibilidade com IDEs.

10 - Testes Unitários e de Integração, Utilização de Ferramentas de Depuração, Uso de Palavras-Chave try-catch, 
Ferramentas de Monitoramento de Erros em Produção, Uso de TypeScript para Verificação Estática de Tipos,
Testar Cenários Limítrofes (Edge Cases), Análise de Código Estático.










